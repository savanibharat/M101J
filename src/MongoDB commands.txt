 db.scores.find({"type":"essay"}).pretty()
db.scores.find().forEach(printjson)
> for(i=0;i<1000;i++){ names=["exam","essay","quiz"]; for(j=0;j<3;j++){db.scores.insert({"student":i,"type":na
mes[j],score:Math.round(Math.random()*100)});}}
--------------------------------------------------------------------------
both the field in find must be satisfied
> db.scores.find({"student":19,type:"essay"}).pretty()
{
        "_id" : ObjectId("52de3dd16177f5dc6e3bc2a8"),
        "student" : 19,
        "type" : "essay",
        "score" : 99
}
>

--------------------------------------------------------------------------
 		(--------search criteria---) (------fields to display------)			
> db.scores.find({"student":19,type:"essay"},{score:true,_id:false}).pretty()
{ "score" : 99 }
> db.scores.find({"student":19,type:"essay"},{"score":true,"_id":false}).pretty()
{ "score" : 99 }
>

--------------------------------------------------------------------------
db.scores.find({score:{$gt :99}}).pretty() scores greater than 99 $gt is operator
--------------------------------------------------------------------------
score greater an 9 and type is essay
> db.scores.find({score:{$gt :99},type:"essay"}).pretty()
{
        "_id" : ObjectId("52de3dd16177f5dc6e3bc5cf"),
        "student" : 288,
        "type" : "essay",
        "score" : 100
}
{
        "_id" : ObjectId("52de3dd16177f5dc6e3bc6b0"),
        "student" : 363,
        "type" : "essay",
        "score" : 100
}
>
---------------------------------------------------------------------------
db.scores.find({score:{$gt :65,$lt:70},type:"essay"}).pretty()
---------------------------------------------------------------------------
db.scores.find({score:{$gte :65,$lt:70},type:"essay"}).pretty()
---------------------------------------------------------------------------
> db.people.find({profession:{$exists:true}}).pretty()
{
        "_id" : ObjectId("52de54f16177f5dc6e3bce2c"),
        "name" : "Smith",
        "age" : 30,
        "profession" : "Hacker"
}
{
        "_id" : ObjectId("52de550b6177f5dc6e3bce2d"),
        "name" : "Jones",
        "age" : 35,
        "profession" : "Backer"
}
---------------------------------------------------------------------------
> db.people.find({profession:{$exists:false}}).pretty()
{ "_id" : ObjectId("52de54a56177f5dc6e3bce26"), "name" : "Alice" }
{ "_id" : ObjectId("52de54b36177f5dc6e3bce27"), "name" : "Bob" }
{ "_id" : ObjectId("52de54b76177f5dc6e3bce28"), "name" : "Charlie" }
{ "_id" : ObjectId("52de54bb6177f5dc6e3bce29"), "name" : "Dave" }
{ "_id" : ObjectId("52de54c06177f5dc6e3bce2a"), "name" : "Edgar" }
{ "_id" : ObjectId("52de54c46177f5dc6e3bce2b"), "name" : "Fred" }
{ "_id" : ObjectId("52de56c46177f5dc6e3bce2e"), "name" : 44 }
---------------------------------------------------------------------------
to get data based on datatype http://bsonspec.org/#/specification
to get all fileds of name types of string
> db.people.find({name:{$type:2}}).pretty()
{ "_id" : ObjectId("52de54a56177f5dc6e3bce26"), "name" : "Alice" }
{ "_id" : ObjectId("52de54b36177f5dc6e3bce27"), "name" : "Bob" }
{ "_id" : ObjectId("52de54b76177f5dc6e3bce28"), "name" : "Charlie" }
{ "_id" : ObjectId("52de54bb6177f5dc6e3bce29"), "name" : "Dave" }
{ "_id" : ObjectId("52de54c06177f5dc6e3bce2a"), "name" : "Edgar" }
{ "_id" : ObjectId("52de54c46177f5dc6e3bce2b"), "name" : "Fred" }
{
        "_id" : ObjectId("52de54f16177f5dc6e3bce2c"),
        "name" : "Smith",
        "age" : 30,
        "profession" : "Hacker"
}
{
        "_id" : ObjectId("52de550b6177f5dc6e3bce2d"),
        "name" : "Jones",
        "age" : 35,
        "profession" : "Backer"
}

> db.people.find({name:{$type:1}}).pretty()
{ "_id" : ObjectId("52de56c46177f5dc6e3bce2e"), "name" : 44 }
---------------------------------------------------------------------------
regular expression
> db.people.find({name:{$regex:"a"}})
{ "_id" : ObjectId("52de54b76177f5dc6e3bce28"), "name" : "Charlie" }
{ "_id" : ObjectId("52de54bb6177f5dc6e3bce29"), "name" : "Dave" }
{ "_id" : ObjectId("52de54c06177f5dc6e3bce2a"), "name" : "Edgar" }
---------------------------------------------------------------------------
Enter with letter e
> db.people.find({name:{$regex:"e$"}})
{ "_id" : ObjectId("52de54a56177f5dc6e3bce26"), "name" : "Alice" }
{ "_id" : ObjectId("52de54b76177f5dc6e3bce28"), "name" : "Charlie" }
{ "_id" : ObjectId("52de54bb6177f5dc6e3bce29"), "name" : "Dave" }
---------------------------------------------------------------------------
name field that starts with a
> db.people.find({name:{$regex:"^A"}})
{ "_id" : ObjectId("52de54a56177f5dc6e3bce26"), "name" : "Alice" }
---------------------------------------------------------------------------
$or is prefix operator it comes before the subqueries that will connect together
It takes input as array
Be careful with this kind of query as there can be syntax err
> db.people.find({ $or :[{name:{$regex:"e$"}},{age:{$exists:true}} ]})
{ "_id" : ObjectId("52de54a56177f5dc6e3bce26"), "name" : "Alice" }
{ "_id" : ObjectId("52de54b76177f5dc6e3bce28"), "name" : "Charlie" }
{ "_id" : ObjectId("52de54bb6177f5dc6e3bce29"), "name" : "Dave" }
{ "_id" : ObjectId("52de54f16177f5dc6e3bce2c"), "name" : "Smith", "age" : 30, "profession" : "Hacker" }
{ "_id" : ObjectId("52de550b6177f5dc6e3bce2d"), "name" : "Jones", "age" : 35, "profession" : "Backer" }
---------------------------------------------------------------------------
and operator
> db.people.find({$and:[{name:{$gt:"C"}},{name:{$regex:"a"}}]})
{ "_id" : ObjectId("52de54b76177f5dc6e3bce28"), "name" : "Charlie" }
{ "_id" : ObjectId("52de54bb6177f5dc6e3bce29"), "name" : "Dave" }
{ "_id" : ObjectId("52de54c06177f5dc6e3bce2a"), "name" : "Edgar" }

> db.people.find({$and:[{name:{$gt:"A"}},{name:{$regex:"a"}}]})
{ "_id" : ObjectId("52de54b76177f5dc6e3bce28"), "name" : "Charlie" }
{ "_id" : ObjectId("52de54bb6177f5dc6e3bce29"), "name" : "Dave" }
{ "_id" : ObjectId("52de54c06177f5dc6e3bce2a"), "name" : "Edgar" }

below query has same output as above query but below query is better performace wise
> db.people.find({ name:{$gt:"A",$regex:"a"}})
{ "_id" : ObjectId("52de54b76177f5dc6e3bce28"), "name" : "Charlie" }
{ "_id" : ObjectId("52de54bb6177f5dc6e3bce29"), "name" : "Dave" }
{ "_id" : ObjectId("52de54c06177f5dc6e3bce2a"), "name" : "Edgar" }
--------------------------------------------------------------------------
> db.accounts.find().pretty()
{
        "_id" : ObjectId("52de657b6177f5dc6e3bce2f"),
        "name" : "George",
        "favorites" : [
                "ice cream",
                "pretzels"
        ]
}
{
        "_id" : ObjectId("52de658f6177f5dc6e3bce30"),
        "name" : "Howard",
        "favorites" : [
                "pretzels",
                "beer"
        ]
}
--------------------------------------------------------------------------
searching in array
> db.accounts.find({favorites:"beer"})
{ "_id" : ObjectId("52de658f6177f5dc6e3bce30"), "name" : "Howard", "favorites" : [  "pretzels",  "beer" ] }
> db.accounts.find({favorites:"beer"}).pretty()
{
        "_id" : ObjectId("52de658f6177f5dc6e3bce30"),
        "name" : "Howard",
        "favorites" : [
                "pretzels",
                "beer"
        ]
}
> db.accounts.find({favorites:"pretzels"}).pretty()
{
        "_id" : ObjectId("52de657b6177f5dc6e3bce2f"),
        "name" : "George",
        "favorites" : [
                "ice cream",
                "pretzels"
        ]
}
{
        "_id" : ObjectId("52de658f6177f5dc6e3bce30"),
        "name" : "Howard",
        "favorites" : [
                "pretzels",
                "beer"
        ]
}
-------------------------------------------------------------------------
arrays with other operator
> db.accounts.find({favorites:"pretzels",name:{$gt:"H"}}).pretty()
{
        "_id" : ObjectId("52de658f6177f5dc6e3bce30"),
        "name" : "Howard",
        "favorites" : [
                "pretzels",
                "beer"
        ]
}
-------------------------------------------------------------------------
match more than one item in all use $all
> db.accounts.find({favorites:{$all:["pretzels","beer"]}}).pretty()
{
        "_id" : ObjectId("52de658f6177f5dc6e3bce30"),
        "name" : "Howard",
        "favorites" : [
                "pretzels",
                "beer"
        ]
}
{
        "_id" : ObjectId("52de68ca6177f5dc6e3bce31"),
        "name" : "Irving",
        "favorites" : [
                "pretzels",
                "beer",
                "cheese"
        ]
}
order of array does not matter
> db.accounts.find({favorites:{$all:["beer","pretzels"]}}).pretty()
{
        "_id" : ObjectId("52de658f6177f5dc6e3bce30"),
        "name" : "Howard",
        "favorites" : [
                "pretzels",
                "beer"
        ]
}
{
        "_id" : ObjectId("52de68ca6177f5dc6e3bce31"),
        "name" : "Irving",
        "favorites" : [
                "pretzels",
                "beer",
                "cheese"
        ]
}
--------------------------------------------------------------------------
Howard and John are in different documents but still in will match them all
> db.accounts.find({name : {$in:["Howard","John"]}}).pretty()
{
        "_id" : ObjectId("52de658f6177f5dc6e3bce30"),
        "name" : "Howard",
        "favorites" : [
                "pretzels",
                "beer"
        ]
}
{
        "_id" : ObjectId("52de68d96177f5dc6e3bce32"),
        "name" : "John",
        "favorites" : [
                "beer",
                "cheese"
        ]
}
-------------------------------------------------------------------------
> db.accounts.find({favorites : {$in:["beer","pretzels"]}}).pretty()
{
        "_id" : ObjectId("52de657b6177f5dc6e3bce2f"),
        "name" : "George",
        "favorites" : [
                "ice cream",
                "pretzels"
        ]
}
{
        "_id" : ObjectId("52de658f6177f5dc6e3bce30"),
        "name" : "Howard",
        "favorites" : [
                "pretzels",
                "beer"
        ]
}
{
        "_id" : ObjectId("52de68ca6177f5dc6e3bce31"),
        "name" : "Irving",
        "favorites" : [
                "pretzels",
                "beer",
                "cheese"
        ]
}
{
        "_id" : ObjectId("52de68d96177f5dc6e3bce32"),
        "name" : "John",
        "favorites" : [
                "beer",
                "cheese"
        ]
}